//打印二维数组
#define _CRT_SECURE_NO_WARNINGS 
#include<string.h>
#include<stdio.h>
int main()
{
	int arr[3][4] = { { 1, 2, 3 }, {4,5} };//3行4列
	int i = 0;
	for (i = 0; i < 3; i++)//行
	{
		int j = 0;
		for (j = 0; j < 4; j++)//列
		{
			printf("arr[%d][%d]=%d ", i, j, arr[i][j]);
		}
		printf("\n");
	} 
	return 0;
}
//结果如下
//arr[0][0] = 1 arr[0][1] = 2 arr[0][2] = 3 arr[0][3] = 0
//arr[1][0] = 4 arr[1][1] = 5 arr[1][2] = 0 arr[1][3] = 0
//arr[2][0] = 0 arr[2][1] = 0 arr[2][2] = 0 arr[2][3] = 0


//打印二维数组，每个元素地址
#define _CRT_SECURE_NO_WARNINGS 
#include<string.h>
#include<stdio.h>
int main()
{
	int arr[3][4] = { { 1, 2, 3 }, {4,5} };//3行4列
	int i = 0;
	for (i = 0; i < 3; i++)//行
	{
		int j = 0;
		for (j = 0; j < 4; j++)//列
		{
			printf("&arr[%d][%d]=%p\n", i, j, &arr[i][j]);
		}
	} 
	return 0;
}
//结果如下,一条连续 线性的，每个相差4.
//&arr[0][0] = 00EFFE58
//&arr[0][1] = 00EFFE5C
//&arr[0][2] = 00EFFE60
//&arr[0][3] = 00EFFE64
//&arr[1][0] = 00EFFE68
//&arr[1][1] = 00EFFE6C
//&arr[1][2] = 00EFFE70
//&arr[1][3] = 00EFFE74
//&arr[2][0] = 00EFFE78
//&arr[2][1] = 00EFFE7C
//&arr[2][2] = 00EFFE80
//&arr[2][3] = 00EFFE84



//冒泡排序
#define _CRT_SECURE_NO_WARNINGS 
#include<string.h>
#include<stdio.h>

//void 无返回类型
void bubble_sort(int*arr[],int sz)
{         //1  确定冒泡排序趟数                    （10个数字，9趟。）
	int i = 0;
	for (i = 0; i < sz - 1; i++)//（9趟，所以0-8   ，9次循环）
	{ 
		int flag = 1;//假设 本趟已经有序
		//2  每一趟冒泡排序
		int j = 0;
		for (j = 0; j < sz-1-i/*(每一趟对数从9逐渐降低)*/; j++)
		{
			if (arr[j]>arr[j+1])//3  (比较和换位)
			{
				int tmp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = tmp;
				flag = 0;
			}

		}
		if (1 == flag)//看到有序，直接跳出大循环，省时间
		{
			break;
		}

	}


}
int main()
{
	int i = 0;
	int arr[] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
    //对arr进行排序，升序
	//数组传参 实参过去给形参？no，实际上传过去的是数组arr首元素的地址，&arr[0]。
	bubble_sort(arr,sz);//冒泡排序函数
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
    return 0;
}

//结果：9 8 7 6 5 4 3 2 1 0
